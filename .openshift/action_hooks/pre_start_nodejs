#!/bin/bash

# The pre_start_cartridge and pre_stop_cartridge hooks are *SOURCED*
# immediately before (re)starting or stopping the specified cartridge.
# They are able to make any desired environment variable changes as
# well as other adjustments to the application environment.

# The post_start_cartridge and post_stop_cartridge hooks are executed
# immediately after (re)starting or stopping the specified cartridge.

# Exercise caution when adding commands to these hooks.  They can
# prevent your application from stopping cleanly or starting at all.
# Application start and stop is subject to different timeouts
# throughout the system.


#  Source utility functions.
source "$OPENSHIFT_REPO_DIR/.openshift/lib/utils"

#  Setup path to include the custom Node[.js] version.
ver=$(get_node_version)
echo ""
echo "  - pre_start_nodejs: Adding Node.js version $ver binaries to path"
_SHOW_SETUP_PATH_MESSAGES="true" setup_path_for_custom_node_version

echo "Exporting Node Environment (production)"
export NODE_ENV=production

# data directories
if [ ! -d "$OPENSHIFT_DATA_DIR/content/data" ]; then
    echo "Creating persistent Ghost data directory"
    mkdir -p $OPENSHIFT_DATA_DIR/content/data
fi
if [ ! -d "$OPENSHIFT_DATA_DIR/content/images" ]; then
    echo "Creating persistent Ghost images directory"
    mkdir -p $OPENSHIFT_DATA_DIR/content/images
fi
echo "Symlinking data directory"
ln -sf $OPENSHIFT_DATA_DIR/content/data $OPENSHIFT_REPO_DIR/content/data
echo "Symlinking images directory"
ln -sf $OPENSHIFT_DATA_DIR/content/images $OPENSHIFT_REPO_DIR/content/images


# If there is a grunt file, run $ grunt prod
if [ -f "${OPENSHIFT_REPO_DIR}"/Gruntfile.js ]; then
	HOME=$HOME/app-root/runtime
    (cd "${OPENSHIFT_REPO_DIR}"; node_modules/grunt-cli/bin/grunt init -f)
    (cd "${OPENSHIFT_REPO_DIR}"; node_modules/grunt-cli/bin/grunt prod)
fi